# coding: utf-8

"""
    Coinbase Platform API

    This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

    The version of the OpenAPI document: 0.0.1-alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SmartContractActivityEvent(BaseModel):
    """
    Represents an event triggered by a smart contract activity on the blockchain. Contains information about the function, transaction, block, and involved addresses.
    """ # noqa: E501
    webhook_id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the webhook that triggered this event.", alias="webhookId")
    event_type: Optional[StrictStr] = Field(default=None, description="Type of event, in this case, an ERC-721 token transfer.", alias="eventType")
    network: Optional[StrictStr] = Field(default=None, description="Blockchain network where the event occurred.")
    project_name: Optional[StrictStr] = Field(default=None, description="Name of the project this smart contract belongs to.", alias="projectName")
    contract_name: Optional[StrictStr] = Field(default=None, description="Name of the contract.", alias="contractName")
    func: Optional[StrictStr] = Field(default=None, description="Name of the function.")
    sig: Optional[StrictStr] = Field(default=None, description="Signature of the function.")
    four_bytes: Optional[StrictStr] = Field(default=None, description="First 4 bytes of the Transaction, a unique ID.", alias="fourBytes")
    contract_address: Optional[StrictStr] = Field(default=None, description="Address of the smart contract.", alias="contractAddress")
    block_hash: Optional[StrictStr] = Field(default=None, description="Hash of the block containing the transaction.", alias="blockHash")
    block_number: Optional[StrictInt] = Field(default=None, description="Number of the block containing the transaction.", alias="blockNumber")
    block_time: Optional[datetime] = Field(default=None, description="Timestamp when the block was mined.", alias="blockTime")
    transaction_hash: Optional[StrictStr] = Field(default=None, description="Hash of the transaction that triggered the event.", alias="transactionHash")
    transaction_index: Optional[StrictInt] = Field(default=None, description="Position of the transaction within the block.", alias="transactionIndex")
    log_index: Optional[StrictInt] = Field(default=None, description="Position of the event log within the transaction.", alias="logIndex")
    var_from: Optional[StrictStr] = Field(default=None, description="Address of the initiator in the transfer.", alias="from")
    to: Optional[StrictStr] = Field(default=None, description="Address of the recipient in the transfer.")
    value: Optional[StrictInt] = Field(default=None, description="Amount of tokens transferred, typically in the smallest unit (e.g., wei for Ethereum).")
    __properties: ClassVar[List[str]] = ["webhookId", "eventType", "network", "projectName", "contractName", "func", "sig", "fourBytes", "contractAddress", "blockHash", "blockNumber", "blockTime", "transactionHash", "transactionIndex", "logIndex", "from", "to", "value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SmartContractActivityEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SmartContractActivityEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "webhookId": obj.get("webhookId"),
            "eventType": obj.get("eventType"),
            "network": obj.get("network"),
            "projectName": obj.get("projectName"),
            "contractName": obj.get("contractName"),
            "func": obj.get("func"),
            "sig": obj.get("sig"),
            "fourBytes": obj.get("fourBytes"),
            "contractAddress": obj.get("contractAddress"),
            "blockHash": obj.get("blockHash"),
            "blockNumber": obj.get("blockNumber"),
            "blockTime": obj.get("blockTime"),
            "transactionHash": obj.get("transactionHash"),
            "transactionIndex": obj.get("transactionIndex"),
            "logIndex": obj.get("logIndex"),
            "from": obj.get("from"),
            "to": obj.get("to"),
            "value": obj.get("value")
        })
        return _obj


