# coding: utf-8

"""
    Coinbase Platform API

    This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

    The version of the OpenAPI document: 0.0.1-alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from cdp.client.models.crypto_amount import CryptoAmount
from cdp.client.models.fiat_amount import FiatAmount
from cdp.client.models.fund_operation_fees import FundOperationFees
from typing import Optional, Set
from typing_extensions import Self

class FundOperation(BaseModel):
    """
    An operation to fund a wallet with crypto
    """ # noqa: E501
    fund_operation_id: StrictStr = Field(description="The ID of the fund operation")
    network_id: StrictStr = Field(description="The ID of the blockchain network")
    wallet_id: StrictStr = Field(description="The ID of the wallet that will receive the crypto")
    address_id: StrictStr = Field(description="The ID of the address that will receive the crypto")
    crypto_amount: CryptoAmount
    fiat_amount: FiatAmount
    fees: FundOperationFees
    status: StrictStr = Field(description="The status of the fund operation")
    __properties: ClassVar[List[str]] = ["fund_operation_id", "network_id", "wallet_id", "address_id", "crypto_amount", "fiat_amount", "fees", "status"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['pending', 'complete', 'failed']):
            raise ValueError("must be one of enum values ('pending', 'complete', 'failed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FundOperation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of crypto_amount
        if self.crypto_amount:
            _dict['crypto_amount'] = self.crypto_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fiat_amount
        if self.fiat_amount:
            _dict['fiat_amount'] = self.fiat_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fees
        if self.fees:
            _dict['fees'] = self.fees.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FundOperation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fund_operation_id": obj.get("fund_operation_id"),
            "network_id": obj.get("network_id"),
            "wallet_id": obj.get("wallet_id"),
            "address_id": obj.get("address_id"),
            "crypto_amount": CryptoAmount.from_dict(obj["crypto_amount"]) if obj.get("crypto_amount") is not None else None,
            "fiat_amount": FiatAmount.from_dict(obj["fiat_amount"]) if obj.get("fiat_amount") is not None else None,
            "fees": FundOperationFees.from_dict(obj["fees"]) if obj.get("fees") is not None else None,
            "status": obj.get("status")
        })
        return _obj


