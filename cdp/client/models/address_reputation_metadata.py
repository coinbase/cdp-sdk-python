# coding: utf-8

"""
    Coinbase Platform API

    This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

    The version of the OpenAPI document: 0.0.1-alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class AddressReputationMetadata(BaseModel):
    """
    The metadata for the reputation score of onchain address.
    """ # noqa: E501
    total_transactions: StrictInt = Field(description="The total number of transactions performed by the address.")
    unique_days_active: StrictInt = Field(description="The number of unique days the address was active.")
    longest_active_streak: StrictInt = Field(description="The longest streak of consecutive active days.")
    current_active_streak: StrictInt = Field(description="The current streak of consecutive active days.")
    activity_period_days: StrictInt = Field(description="The total number of days the address has been active.")
    token_swaps_performed: StrictInt = Field(description="The number of token swaps performed by the address.")
    bridge_transactions_performed: StrictInt = Field(description="The number of bridge transactions performed by the address.")
    lend_borrow_stake_transactions: StrictInt = Field(description="The number of lend, borrow, or stake transactions performed by the address.")
    ens_contract_interactions: StrictInt = Field(description="The number of interactions with ENS contracts.")
    smart_contract_deployments: StrictInt = Field(description="The number of smart contracts deployed by the address.")
    __properties: ClassVar[List[str]] = ["total_transactions", "unique_days_active", "longest_active_streak", "current_active_streak", "activity_period_days", "token_swaps_performed", "bridge_transactions_performed", "lend_borrow_stake_transactions", "ens_contract_interactions", "smart_contract_deployments"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddressReputationMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddressReputationMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "total_transactions": obj.get("total_transactions"),
            "unique_days_active": obj.get("unique_days_active"),
            "longest_active_streak": obj.get("longest_active_streak"),
            "current_active_streak": obj.get("current_active_streak"),
            "activity_period_days": obj.get("activity_period_days"),
            "token_swaps_performed": obj.get("token_swaps_performed"),
            "bridge_transactions_performed": obj.get("bridge_transactions_performed"),
            "lend_borrow_stake_transactions": obj.get("lend_borrow_stake_transactions"),
            "ens_contract_interactions": obj.get("ens_contract_interactions"),
            "smart_contract_deployments": obj.get("smart_contract_deployments")
        })
        return _obj


