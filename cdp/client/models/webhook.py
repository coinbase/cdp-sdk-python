# coding: utf-8

"""
    Coinbase Platform API

    This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

    The version of the OpenAPI document: 0.0.1-alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cdp.client.models.webhook_event_filter import WebhookEventFilter
from cdp.client.models.webhook_event_type import WebhookEventType
from cdp.client.models.webhook_event_type_filter import WebhookEventTypeFilter
from cdp.client.models.webhook_status import WebhookStatus
from typing import Optional, Set
from typing_extensions import Self

class Webhook(BaseModel):
    """
    Webhook that is used for getting notifications when monitored events occur.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Identifier of the webhook.")
    network_id: Optional[StrictStr] = Field(default=None, description="The ID of the blockchain network")
    event_type: Optional[WebhookEventType] = None
    event_type_filter: Optional[WebhookEventTypeFilter] = None
    event_filters: Optional[List[WebhookEventFilter]] = Field(default=None, description="Webhook will monitor all events that matches any one of the event filters.")
    notification_uri: Optional[StrictStr] = Field(default=None, description="The URL to which the notifications will be sent.")
    created_at: Optional[datetime] = Field(default=None, description="The date and time the webhook was created.")
    updated_at: Optional[datetime] = Field(default=None, description="The date and time the webhook was last updated.")
    signature_header: Optional[StrictStr] = Field(default=None, description="The header that will contain the signature of the webhook payload.")
    status: WebhookStatus
    __properties: ClassVar[List[str]] = ["id", "network_id", "event_type", "event_type_filter", "event_filters", "notification_uri", "created_at", "updated_at", "signature_header", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Webhook from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of event_type_filter
        if self.event_type_filter:
            _dict['event_type_filter'] = self.event_type_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in event_filters (list)
        _items = []
        if self.event_filters:
            for _item_event_filters in self.event_filters:
                if _item_event_filters:
                    _items.append(_item_event_filters.to_dict())
            _dict['event_filters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Webhook from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "network_id": obj.get("network_id"),
            "event_type": obj.get("event_type"),
            "event_type_filter": WebhookEventTypeFilter.from_dict(obj["event_type_filter"]) if obj.get("event_type_filter") is not None else None,
            "event_filters": [WebhookEventFilter.from_dict(_item) for _item in obj["event_filters"]] if obj.get("event_filters") is not None else None,
            "notification_uri": obj.get("notification_uri"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "signature_header": obj.get("signature_header"),
            "status": obj.get("status")
        })
        return _obj


