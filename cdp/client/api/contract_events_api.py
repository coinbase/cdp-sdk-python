# coding: utf-8

"""
    Coinbase Platform API

    This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

    The version of the OpenAPI document: 0.0.1-alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from cdp.client.models.contract_event_list import ContractEventList

from cdp.client.api_client import ApiClient, RequestSerialized
from cdp.client.api_response import ApiResponse
from cdp.client.rest import RESTResponseType


class ContractEventsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def list_contract_events(
        self,
        network_id: Annotated[StrictStr, Field(description="Unique identifier for the blockchain network")],
        protocol_name: Annotated[StrictStr, Field(description="Case-sensitive name of the blockchain protocol")],
        contract_address: Annotated[StrictStr, Field(description="EVM address of the smart contract (42 characters, including '0x', in lowercase)")],
        contract_name: Annotated[StrictStr, Field(description="Case-sensitive name of the specific contract within the project")],
        event_name: Annotated[StrictStr, Field(description="Case-sensitive name of the event to filter for in the contract's logs")],
        from_block_height: Annotated[StrictInt, Field(description="Lower bound of the block range to query (inclusive)")],
        to_block_height: Annotated[StrictInt, Field(description="Upper bound of the block range to query (inclusive)")],
        next_page: Annotated[Optional[StrictStr], Field(description="Pagination token for retrieving the next set of results")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ContractEventList:
        """List contract events

        Retrieve events for a specific contract

        :param network_id: Unique identifier for the blockchain network (required)
        :type network_id: str
        :param protocol_name: Case-sensitive name of the blockchain protocol (required)
        :type protocol_name: str
        :param contract_address: EVM address of the smart contract (42 characters, including '0x', in lowercase) (required)
        :type contract_address: str
        :param contract_name: Case-sensitive name of the specific contract within the project (required)
        :type contract_name: str
        :param event_name: Case-sensitive name of the event to filter for in the contract's logs (required)
        :type event_name: str
        :param from_block_height: Lower bound of the block range to query (inclusive) (required)
        :type from_block_height: int
        :param to_block_height: Upper bound of the block range to query (inclusive) (required)
        :type to_block_height: int
        :param next_page: Pagination token for retrieving the next set of results
        :type next_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_contract_events_serialize(
            network_id=network_id,
            protocol_name=protocol_name,
            contract_address=contract_address,
            contract_name=contract_name,
            event_name=event_name,
            from_block_height=from_block_height,
            to_block_height=to_block_height,
            next_page=next_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContractEventList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_contract_events_with_http_info(
        self,
        network_id: Annotated[StrictStr, Field(description="Unique identifier for the blockchain network")],
        protocol_name: Annotated[StrictStr, Field(description="Case-sensitive name of the blockchain protocol")],
        contract_address: Annotated[StrictStr, Field(description="EVM address of the smart contract (42 characters, including '0x', in lowercase)")],
        contract_name: Annotated[StrictStr, Field(description="Case-sensitive name of the specific contract within the project")],
        event_name: Annotated[StrictStr, Field(description="Case-sensitive name of the event to filter for in the contract's logs")],
        from_block_height: Annotated[StrictInt, Field(description="Lower bound of the block range to query (inclusive)")],
        to_block_height: Annotated[StrictInt, Field(description="Upper bound of the block range to query (inclusive)")],
        next_page: Annotated[Optional[StrictStr], Field(description="Pagination token for retrieving the next set of results")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ContractEventList]:
        """List contract events

        Retrieve events for a specific contract

        :param network_id: Unique identifier for the blockchain network (required)
        :type network_id: str
        :param protocol_name: Case-sensitive name of the blockchain protocol (required)
        :type protocol_name: str
        :param contract_address: EVM address of the smart contract (42 characters, including '0x', in lowercase) (required)
        :type contract_address: str
        :param contract_name: Case-sensitive name of the specific contract within the project (required)
        :type contract_name: str
        :param event_name: Case-sensitive name of the event to filter for in the contract's logs (required)
        :type event_name: str
        :param from_block_height: Lower bound of the block range to query (inclusive) (required)
        :type from_block_height: int
        :param to_block_height: Upper bound of the block range to query (inclusive) (required)
        :type to_block_height: int
        :param next_page: Pagination token for retrieving the next set of results
        :type next_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_contract_events_serialize(
            network_id=network_id,
            protocol_name=protocol_name,
            contract_address=contract_address,
            contract_name=contract_name,
            event_name=event_name,
            from_block_height=from_block_height,
            to_block_height=to_block_height,
            next_page=next_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContractEventList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_contract_events_without_preload_content(
        self,
        network_id: Annotated[StrictStr, Field(description="Unique identifier for the blockchain network")],
        protocol_name: Annotated[StrictStr, Field(description="Case-sensitive name of the blockchain protocol")],
        contract_address: Annotated[StrictStr, Field(description="EVM address of the smart contract (42 characters, including '0x', in lowercase)")],
        contract_name: Annotated[StrictStr, Field(description="Case-sensitive name of the specific contract within the project")],
        event_name: Annotated[StrictStr, Field(description="Case-sensitive name of the event to filter for in the contract's logs")],
        from_block_height: Annotated[StrictInt, Field(description="Lower bound of the block range to query (inclusive)")],
        to_block_height: Annotated[StrictInt, Field(description="Upper bound of the block range to query (inclusive)")],
        next_page: Annotated[Optional[StrictStr], Field(description="Pagination token for retrieving the next set of results")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List contract events

        Retrieve events for a specific contract

        :param network_id: Unique identifier for the blockchain network (required)
        :type network_id: str
        :param protocol_name: Case-sensitive name of the blockchain protocol (required)
        :type protocol_name: str
        :param contract_address: EVM address of the smart contract (42 characters, including '0x', in lowercase) (required)
        :type contract_address: str
        :param contract_name: Case-sensitive name of the specific contract within the project (required)
        :type contract_name: str
        :param event_name: Case-sensitive name of the event to filter for in the contract's logs (required)
        :type event_name: str
        :param from_block_height: Lower bound of the block range to query (inclusive) (required)
        :type from_block_height: int
        :param to_block_height: Upper bound of the block range to query (inclusive) (required)
        :type to_block_height: int
        :param next_page: Pagination token for retrieving the next set of results
        :type next_page: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_contract_events_serialize(
            network_id=network_id,
            protocol_name=protocol_name,
            contract_address=contract_address,
            contract_name=contract_name,
            event_name=event_name,
            from_block_height=from_block_height,
            to_block_height=to_block_height,
            next_page=next_page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContractEventList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_contract_events_serialize(
        self,
        network_id,
        protocol_name,
        contract_address,
        contract_name,
        event_name,
        from_block_height,
        to_block_height,
        next_page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if network_id is not None:
            _path_params['network_id'] = network_id
        if contract_address is not None:
            _path_params['contract_address'] = contract_address
        # process the query parameters
        if protocol_name is not None:
            
            _query_params.append(('protocol_name', protocol_name))
            
        if contract_name is not None:
            
            _query_params.append(('contract_name', contract_name))
            
        if event_name is not None:
            
            _query_params.append(('event_name', event_name))
            
        if from_block_height is not None:
            
            _query_params.append(('from_block_height', from_block_height))
            
        if to_block_height is not None:
            
            _query_params.append(('to_block_height', to_block_height))
            
        if next_page is not None:
            
            _query_params.append(('next_page', next_page))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey', 
            'session'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/networks/{network_id}/smart_contracts/{contract_address}/events',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


